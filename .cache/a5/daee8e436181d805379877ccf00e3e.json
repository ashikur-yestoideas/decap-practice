{"id":"node_modules/typo-js/typo.js","dependencies":[{"name":"D:\\New-Volume(D)\\yestoideas-company-projects\\demo-blog-project\\package.json","includedInParent":true,"mtime":1738163972179},{"name":"D:\\New-Volume(D)\\yestoideas-company-projects\\demo-blog-project\\node_modules\\typo-js\\package.json","includedInParent":true,"mtime":1738163969438},{"name":"fs","loc":{"line":219,"column":33,"index":10116},"parent":"D:\\New-Volume(D)\\yestoideas-company-projects\\demo-blog-project\\node_modules\\typo-js\\typo.js","resolved":"C:\\Users\\Computer World\\AppData\\Roaming\\nvm\\v18.20.3\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"var __dirname = \"D:\\\\New-Volume(D)\\\\yestoideas-company-projects\\\\demo-blog-project\\\\node_modules\\\\typo-js\";\n/* globals chrome: false */\n/* globals __dirname: false */\n/* globals require: false */\n/* globals Buffer: false */\n/* globals module: false */\n/**\n * Typo is a JavaScript implementation of a spellchecker using hunspell-style\n * dictionaries.\n */\nvar Typo;\n(function () {\n    \"use strict\";\n    /**\n     * Typo constructor.\n     *\n     * @param {string} [dictionary] The locale code of the dictionary being used. e.g.,\n     *                              \"en_US\". This is only used to auto-load dictionaries.\n     * @param {string} [affData]    The data from the dictionary's .aff file. If omitted\n     *                              and Typo.js is being used in a Chrome extension, the .aff\n     *                              file will be loaded automatically from\n     *                              lib/typo/dictionaries/[dictionary]/[dictionary].aff\n     *                              In other environments, it will be loaded from\n     *                              [settings.dictionaryPath]/dictionaries/[dictionary]/[dictionary].aff\n     * @param {string} [wordsData]  The data from the dictionary's .dic file. If omitted\n     *                              and Typo.js is being used in a Chrome extension, the .dic\n     *                              file will be loaded automatically from\n     *                              lib/typo/dictionaries/[dictionary]/[dictionary].dic\n     *                              In other environments, it will be loaded from\n     *                              [settings.dictionaryPath]/dictionaries/[dictionary]/[dictionary].dic\n     * @param {Object} [settings]   Constructor settings. Available properties are:\n     *                              {string} [dictionaryPath]: path to load dictionary from in non-chrome\n     *                              environment.\n     *                              {Object} [flags]: flag information.\n     *                              {boolean} [asyncLoad]: If true, affData and wordsData will be loaded\n     *                              asynchronously.\n     *                              {Function} [loadedCallback]: Called when both affData and wordsData\n     *                              have been loaded. Only used if asyncLoad is set to true. The parameter\n     *                              is the instantiated Typo object.\n     *\n     * @returns {Typo} A Typo object.\n     */\n    Typo = function (dictionary, affData, wordsData, settings) {\n        settings = settings || {};\n        this.dictionary = null;\n        this.rules = {};\n        this.dictionaryTable = {};\n        this.compoundRules = [];\n        this.compoundRuleCodes = {};\n        this.replacementTable = [];\n        this.flags = settings.flags || {};\n        this.memoized = {};\n        this.loaded = false;\n        var self = this;\n        var path;\n        // Loop-control variables.\n        var i, j, _len, _jlen;\n        if (dictionary) {\n            self.dictionary = dictionary;\n            // If the data is preloaded, just setup the Typo object.\n            if (affData && wordsData) {\n                setup();\n            }\n            // Loading data for Chrome extentions.\n            else if (typeof window !== 'undefined' && (window.chrome || window.browser)) {\n                var runtime = window.chrome && window.chrome.runtime ? window.chrome.runtime : browser.runtime;\n                if (settings.dictionaryPath) {\n                    path = settings.dictionaryPath;\n                }\n                else {\n                    path = \"typo/dictionaries\";\n                }\n                if (!affData)\n                    readDataFile(runtime.getURL(path + \"/\" + dictionary + \"/\" + dictionary + \".aff\"), setAffData);\n                if (!wordsData)\n                    readDataFile(runtime.getURL(path + \"/\" + dictionary + \"/\" + dictionary + \".dic\"), setWordsData);\n            }\n            // Loading data for Node.js or other environments.\n            else {\n                if (settings.dictionaryPath) {\n                    path = settings.dictionaryPath;\n                }\n                else if (typeof __dirname !== 'undefined') {\n                    path = __dirname + '/dictionaries';\n                }\n                else {\n                    path = './dictionaries';\n                }\n                if (!affData)\n                    readDataFile(path + \"/\" + dictionary + \"/\" + dictionary + \".aff\", setAffData);\n                if (!wordsData)\n                    readDataFile(path + \"/\" + dictionary + \"/\" + dictionary + \".dic\", setWordsData);\n            }\n        }\n        function readDataFile(url, setFunc) {\n            var response = self._readFile(url, null, settings === null || settings === void 0 ? void 0 : settings.asyncLoad);\n            if (settings === null || settings === void 0 ? void 0 : settings.asyncLoad) {\n                response.then(function (data) {\n                    setFunc(data);\n                });\n            }\n            else {\n                setFunc(response);\n            }\n        }\n        function setAffData(data) {\n            affData = data;\n            if (wordsData) {\n                setup();\n            }\n        }\n        function setWordsData(data) {\n            wordsData = data;\n            if (affData) {\n                setup();\n            }\n        }\n        function setup() {\n            self.rules = self._parseAFF(affData);\n            // Save the rule codes that are used in compound rules.\n            self.compoundRuleCodes = {};\n            for (i = 0, _len = self.compoundRules.length; i < _len; i++) {\n                var rule = self.compoundRules[i];\n                for (j = 0, _jlen = rule.length; j < _jlen; j++) {\n                    self.compoundRuleCodes[rule[j]] = [];\n                }\n            }\n            // If we add this ONLYINCOMPOUND flag to self.compoundRuleCodes, then _parseDIC\n            // will do the work of saving the list of words that are compound-only.\n            if (\"ONLYINCOMPOUND\" in self.flags) {\n                self.compoundRuleCodes[self.flags.ONLYINCOMPOUND] = [];\n            }\n            self.dictionaryTable = self._parseDIC(wordsData);\n            // Get rid of any codes from the compound rule codes that are never used\n            // (or that were special regex characters).  Not especially necessary...\n            for (i in self.compoundRuleCodes) {\n                if (self.compoundRuleCodes[i].length === 0) {\n                    delete self.compoundRuleCodes[i];\n                }\n            }\n            // Build the full regular expressions for each compound rule.\n            // I have a feeling (but no confirmation yet) that this method of\n            // testing for compound words is probably slow.\n            for (i = 0, _len = self.compoundRules.length; i < _len; i++) {\n                var ruleText = self.compoundRules[i];\n                var expressionText = \"\";\n                for (j = 0, _jlen = ruleText.length; j < _jlen; j++) {\n                    var character = ruleText[j];\n                    if (character in self.compoundRuleCodes) {\n                        expressionText += \"(\" + self.compoundRuleCodes[character].join(\"|\") + \")\";\n                    }\n                    else {\n                        expressionText += character;\n                    }\n                }\n                self.compoundRules[i] = new RegExp('^' + expressionText + '$', \"i\");\n            }\n            self.loaded = true;\n            if ((settings === null || settings === void 0 ? void 0 : settings.asyncLoad) && (settings === null || settings === void 0 ? void 0 : settings.loadedCallback)) {\n                settings.loadedCallback(self);\n            }\n        }\n        return this;\n    };\n    Typo.prototype = {\n        /**\n         * Loads a Typo instance from a hash of all of the Typo properties.\n         *\n         * @param {object} obj A hash of Typo properties, probably gotten from a JSON.parse(JSON.stringify(typo_instance)).\n         */\n        load: function (obj) {\n            for (var i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    this[i] = obj[i];\n                }\n            }\n            return this;\n        },\n        /**\n         * Read the contents of a file.\n         *\n         * @param {string} path The path (relative) to the file.\n         * @param {string} [charset=\"ISO8859-1\"] The expected charset of the file\n         * @param {boolean} async If true, the file will be read asynchronously. For node.js this does nothing, all\n         *        files are read synchronously.\n         * @returns {string} The file data if async is false, otherwise a promise object. If running node.js, the data is\n         *          always returned.\n         */\n        _readFile: function (path, charset, async) {\n            var _a;\n            charset = charset || \"utf8\";\n            if (typeof XMLHttpRequest !== 'undefined') {\n                var req_1 = new XMLHttpRequest();\n                req_1.open(\"GET\", path, !!async);\n                (_a = req_1.overrideMimeType) === null || _a === void 0 ? void 0 : _a.call(req_1, \"text/plain; charset=\" + charset);\n                if (!!async) {\n                    var promise = new Promise(function (resolve, reject) {\n                        req_1.onload = function () {\n                            if (req_1.status === 200) {\n                                resolve(req_1.responseText);\n                            }\n                            else {\n                                reject(req_1.statusText);\n                            }\n                        };\n                        req_1.onerror = function () {\n                            reject(req_1.statusText);\n                        };\n                    });\n                    req_1.send(null);\n                    return promise;\n                }\n                else {\n                    req_1.send(null);\n                    return req_1.responseText;\n                }\n            }\n            else if (typeof require !== 'undefined') {\n                // Node.js\n                var fs = require(\"fs\");\n                try {\n                    if (fs.existsSync(path)) {\n                        return fs.readFileSync(path, charset);\n                    }\n                    else {\n                        console.log(\"Path \" + path + \" does not exist.\");\n                    }\n                }\n                catch (e) {\n                    console.log(e);\n                }\n                return '';\n            }\n            return '';\n        },\n        /**\n         * Parse the rules out from a .aff file.\n         *\n         * @param {string} data The contents of the affix file.\n         * @returns object The rules from the file.\n         */\n        _parseAFF: function (data) {\n            var rules = {};\n            var line, subline, numEntries, lineParts;\n            var i, j, _len, _jlen;\n            var lines = data.split(/\\r?\\n/);\n            for (i = 0, _len = lines.length; i < _len; i++) {\n                // Remove comment lines\n                line = this._removeAffixComments(lines[i]);\n                line = line.trim();\n                if (!line) {\n                    continue;\n                }\n                var definitionParts = line.split(/\\s+/);\n                var ruleType = definitionParts[0];\n                if (ruleType === \"PFX\" || ruleType === \"SFX\") {\n                    var ruleCode = definitionParts[1];\n                    var combineable = definitionParts[2];\n                    numEntries = parseInt(definitionParts[3], 10);\n                    var entries = [];\n                    for (j = i + 1, _jlen = i + 1 + numEntries; j < _jlen; j++) {\n                        subline = lines[j];\n                        lineParts = subline.split(/\\s+/);\n                        var charactersToRemove = lineParts[2];\n                        var additionParts = lineParts[3].split(\"/\");\n                        var charactersToAdd = additionParts[0];\n                        if (charactersToAdd === \"0\")\n                            charactersToAdd = \"\";\n                        var continuationClasses = this.parseRuleCodes(additionParts[1]);\n                        var regexToMatch = lineParts[4];\n                        var entry = {\n                            add: charactersToAdd\n                        };\n                        if (continuationClasses.length > 0)\n                            entry.continuationClasses = continuationClasses;\n                        if (regexToMatch !== \".\") {\n                            if (ruleType === \"SFX\") {\n                                entry.match = new RegExp(regexToMatch + \"$\");\n                            }\n                            else {\n                                entry.match = new RegExp(\"^\" + regexToMatch);\n                            }\n                        }\n                        if (charactersToRemove != \"0\") {\n                            if (ruleType === \"SFX\") {\n                                entry.remove = new RegExp(charactersToRemove + \"$\");\n                            }\n                            else {\n                                entry.remove = charactersToRemove;\n                            }\n                        }\n                        entries.push(entry);\n                    }\n                    rules[ruleCode] = { \"type\": ruleType, \"combineable\": (combineable === \"Y\"), \"entries\": entries };\n                    i += numEntries;\n                }\n                else if (ruleType === \"COMPOUNDRULE\") {\n                    numEntries = parseInt(definitionParts[1], 10);\n                    for (j = i + 1, _jlen = i + 1 + numEntries; j < _jlen; j++) {\n                        line = lines[j];\n                        lineParts = line.split(/\\s+/);\n                        this.compoundRules.push(lineParts[1]);\n                    }\n                    i += numEntries;\n                }\n                else if (ruleType === \"REP\") {\n                    lineParts = line.split(/\\s+/);\n                    if (lineParts.length === 3) {\n                        this.replacementTable.push([lineParts[1], lineParts[2]]);\n                    }\n                }\n                else {\n                    // ONLYINCOMPOUND\n                    // COMPOUNDMIN\n                    // FLAG\n                    // KEEPCASE\n                    // NEEDAFFIX\n                    this.flags[ruleType] = definitionParts[1];\n                }\n            }\n            return rules;\n        },\n        /**\n         * Removes comments.\n         *\n         * @param {string} data A line from an affix file.\n         * @return {string} The cleaned-up line.\n         */\n        _removeAffixComments: function (line) {\n            // This used to remove any string starting with '#' up to the end of the line,\n            // but some COMPOUNDRULE definitions include '#' as part of the rule.\n            // So, only remove lines that begin with a comment, optionally preceded by whitespace.\n            if (line.match(/^\\s*#/)) {\n                return '';\n            }\n            return line;\n        },\n        /**\n         * Parses the words out from the .dic file.\n         *\n         * @param {string} data The data from the dictionary file.\n         * @returns HashMap The lookup table containing all of the words and\n         *                 word forms from the dictionary.\n         */\n        _parseDIC: function (data) {\n            data = this._removeDicComments(data);\n            var lines = data.split(/\\r?\\n/);\n            var dictionaryTable = {};\n            function addWord(word, rules) {\n                // Some dictionaries will list the same word multiple times with different rule sets.\n                if (!dictionaryTable.hasOwnProperty(word)) {\n                    dictionaryTable[word] = null;\n                }\n                if (rules.length > 0) {\n                    if (dictionaryTable[word] === null) {\n                        dictionaryTable[word] = [];\n                    }\n                    dictionaryTable[word].push(rules);\n                }\n            }\n            // The first line is the number of words in the dictionary.\n            for (var i = 1, _len = lines.length; i < _len; i++) {\n                var line = lines[i];\n                if (!line) {\n                    // Ignore empty lines.\n                    continue;\n                }\n                var parts = line.split(\"/\", 2);\n                var word = parts[0];\n                // Now for each affix rule, generate that form of the word.\n                if (parts.length > 1) {\n                    var ruleCodesArray = this.parseRuleCodes(parts[1]);\n                    // Save the ruleCodes for compound word situations.\n                    if (!(\"NEEDAFFIX\" in this.flags) || ruleCodesArray.indexOf(this.flags.NEEDAFFIX) === -1) {\n                        addWord(word, ruleCodesArray);\n                    }\n                    for (var j = 0, _jlen = ruleCodesArray.length; j < _jlen; j++) {\n                        var code = ruleCodesArray[j];\n                        var rule = this.rules[code];\n                        if (rule) {\n                            var newWords = this._applyRule(word, rule);\n                            for (var ii = 0, _iilen = newWords.length; ii < _iilen; ii++) {\n                                var newWord = newWords[ii];\n                                addWord(newWord, []);\n                                if (rule.combineable) {\n                                    for (var k = j + 1; k < _jlen; k++) {\n                                        var combineCode = ruleCodesArray[k];\n                                        var combineRule = this.rules[combineCode];\n                                        if (combineRule) {\n                                            if (combineRule.combineable && (rule.type != combineRule.type)) {\n                                                var otherNewWords = this._applyRule(newWord, combineRule);\n                                                for (var iii = 0, _iiilen = otherNewWords.length; iii < _iiilen; iii++) {\n                                                    var otherNewWord = otherNewWords[iii];\n                                                    addWord(otherNewWord, []);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (code in this.compoundRuleCodes) {\n                            this.compoundRuleCodes[code].push(word);\n                        }\n                    }\n                }\n                else {\n                    addWord(word.trim(), []);\n                }\n            }\n            return dictionaryTable;\n        },\n        /**\n         * Removes comment lines and then cleans up blank lines and trailing whitespace.\n         *\n         * @param {string} data The data from a .dic file.\n         * @return {string} The cleaned-up data.\n         */\n        _removeDicComments: function (data) {\n            // I can't find any official documentation on it, but at least the de_DE\n            // dictionary uses tab-indented lines as comments.\n            // Remove comments\n            data = data.replace(/^\\t.*$/mg, \"\");\n            return data;\n        },\n        parseRuleCodes: function (textCodes) {\n            if (!textCodes) {\n                return [];\n            }\n            else if (!(\"FLAG\" in this.flags)) {\n                // The flag symbols are single characters\n                return textCodes.split(\"\");\n            }\n            else if (this.flags.FLAG === \"long\") {\n                // The flag symbols are two characters long.\n                var flags = [];\n                for (var i = 0, _len = textCodes.length; i < _len; i += 2) {\n                    flags.push(textCodes.substr(i, 2));\n                }\n                return flags;\n            }\n            else if (this.flags.FLAG === \"num\") {\n                // The flag symbols are a CSV list of numbers.\n                return textCodes.split(\",\");\n            }\n            else if (this.flags.FLAG === \"UTF-8\") {\n                // The flags are single UTF-8 characters.\n                // @see https://github.com/cfinke/Typo.js/issues/57\n                return Array.from(textCodes);\n            }\n            else {\n                // It's possible that this fallback case will not work for all FLAG values,\n                // but I think it's more likely to work than not returning anything at all.\n                return textCodes.split(\"\");\n            }\n        },\n        /**\n         * Applies an affix rule to a word.\n         *\n         * @param {string} word The base word.\n         * @param {Object} rule The affix rule.\n         * @returns {string[]} The new words generated by the rule.\n         */\n        _applyRule: function (word, rule) {\n            var entries = rule.entries;\n            var newWords = [];\n            for (var i = 0, _len = entries.length; i < _len; i++) {\n                var entry = entries[i];\n                if (!entry.match || word.match(entry.match)) {\n                    var newWord = word;\n                    if (entry.remove) {\n                        newWord = newWord.replace(entry.remove, \"\");\n                    }\n                    if (rule.type === \"SFX\") {\n                        newWord = newWord + entry.add;\n                    }\n                    else {\n                        newWord = entry.add + newWord;\n                    }\n                    newWords.push(newWord);\n                    if (\"continuationClasses\" in entry) {\n                        for (var j = 0, _jlen = entry.continuationClasses.length; j < _jlen; j++) {\n                            var continuationRule = this.rules[entry.continuationClasses[j]];\n                            if (continuationRule) {\n                                newWords = newWords.concat(this._applyRule(newWord, continuationRule));\n                            }\n                            /*\n                            else {\n                                // This shouldn't happen, but it does, at least in the de_DE dictionary.\n                                // I think the author mistakenly supplied lower-case rule codes instead\n                                // of upper-case.\n                            }\n                            */\n                        }\n                    }\n                }\n            }\n            return newWords;\n        },\n        /**\n         * Checks whether a word or a capitalization variant exists in the current dictionary.\n         * The word is trimmed and several variations of capitalizations are checked.\n         * If you want to check a word without any changes made to it, call checkExact()\n         *\n         * @see http://blog.stevenlevithan.com/archives/faster-trim-javascript re:trimming function\n         *\n         * @param {string} aWord The word to check.\n         * @returns {boolean}\n         */\n        check: function (aWord) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            if (!aWord) {\n                return false;\n            }\n            // Remove leading and trailing whitespace\n            var trimmedWord = aWord.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n            if (this.checkExact(trimmedWord)) {\n                return true;\n            }\n            // The exact word is not in the dictionary.\n            if (trimmedWord.toUpperCase() === trimmedWord) {\n                // The word was supplied in all uppercase.\n                // Check for a capitalized form of the word.\n                var capitalizedWord = trimmedWord[0] + trimmedWord.substring(1).toLowerCase();\n                if (this.hasFlag(capitalizedWord, \"KEEPCASE\")) {\n                    // Capitalization variants are not allowed for this word.\n                    return false;\n                }\n                if (this.checkExact(capitalizedWord)) {\n                    // The all-caps word is a capitalized word spelled correctly.\n                    return true;\n                }\n                if (this.checkExact(trimmedWord.toLowerCase())) {\n                    // The all-caps is a lowercase word spelled correctly.\n                    return true;\n                }\n            }\n            var uncapitalizedWord = trimmedWord[0].toLowerCase() + trimmedWord.substring(1);\n            if (uncapitalizedWord !== trimmedWord) {\n                if (this.hasFlag(uncapitalizedWord, \"KEEPCASE\")) {\n                    // Capitalization variants are not allowed for this word.\n                    return false;\n                }\n                // Check for an uncapitalized form\n                if (this.checkExact(uncapitalizedWord)) {\n                    // The word is spelled correctly but with the first letter capitalized.\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Checks whether a word exists in the current dictionary.\n         *\n         * @param {string} word The word to check.\n         * @returns {boolean}\n         */\n        checkExact: function (word) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            var ruleCodes = this.dictionaryTable[word];\n            var i, _len;\n            if (typeof ruleCodes === 'undefined') {\n                // Check if this might be a compound word.\n                if (\"COMPOUNDMIN\" in this.flags && word.length >= this.flags.COMPOUNDMIN) {\n                    for (i = 0, _len = this.compoundRules.length; i < _len; i++) {\n                        if (word.match(this.compoundRules[i])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            else if (ruleCodes === null) {\n                // a null (but not undefined) value for an entry in the dictionary table\n                // means that the word is in the dictionary but has no flags.\n                return true;\n            }\n            else if (typeof ruleCodes === 'object') { // this.dictionary['hasOwnProperty'] will be a function.\n                for (i = 0, _len = ruleCodes.length; i < _len; i++) {\n                    if (!this.hasFlag(word, \"ONLYINCOMPOUND\", ruleCodes[i])) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        },\n        /**\n         * Looks up whether a given word is flagged with a given flag.\n         *\n         * @param {string} word The word in question.\n         * @param {string} flag The flag in question.\n         * @return {boolean}\n         */\n        hasFlag: function (word, flag, wordFlags) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            if (flag in this.flags) {\n                if (typeof wordFlags === 'undefined') {\n                    wordFlags = Array.prototype.concat.apply([], this.dictionaryTable[word]);\n                }\n                if (wordFlags && wordFlags.indexOf(this.flags[flag]) !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Returns a list of suggestions for a misspelled word.\n         *\n         * @see http://www.norvig.com/spell-correct.html for the basis of this suggestor.\n         * This suggestor is primitive, but it works.\n         *\n         * @param {string} word The misspelling.\n         * @param {number} [limit=5] The maximum number of suggestions to return.\n         * @returns {string[]} The array of suggestions.\n         */\n        alphabet: \"\",\n        suggest: function (word, limit) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            limit = limit || 5;\n            if (this.memoized.hasOwnProperty(word)) {\n                var memoizedLimit = this.memoized[word]['limit'];\n                // Only return the cached list if it's big enough or if there weren't enough suggestions\n                // to fill a smaller limit.\n                if (limit <= memoizedLimit || this.memoized[word]['suggestions'].length < memoizedLimit) {\n                    return this.memoized[word]['suggestions'].slice(0, limit);\n                }\n            }\n            if (this.check(word))\n                return [];\n            // Check the replacement table.\n            for (var i = 0, _len = this.replacementTable.length; i < _len; i++) {\n                var replacementEntry = this.replacementTable[i];\n                if (word.indexOf(replacementEntry[0]) !== -1) {\n                    var correctedWord = word.replace(replacementEntry[0], replacementEntry[1]);\n                    if (this.check(correctedWord)) {\n                        return [correctedWord];\n                    }\n                }\n            }\n            if (!this.alphabet) {\n                // Use the English alphabet as the default. Problematic, but backwards-compatible.\n                this.alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n                // Any characters defined in the affix file as substitutions can go in the alphabet too.\n                // Note that dictionaries do not include the entire alphabet in the TRY flag when it's there.\n                // For example, Q is not in the default English TRY list; that's why having the default\n                // alphabet above is useful.\n                if ('TRY' in this.flags) {\n                    this.alphabet += this.flags['TRY'];\n                }\n                // Plus any additional characters specifically defined as being allowed in words.\n                if ('WORDCHARS' in this.flags) {\n                    this.alphabet += this.flags['WORDCHARS'];\n                }\n                // Remove any duplicates.\n                var alphaArray = this.alphabet.split(\"\");\n                alphaArray.sort();\n                var alphaHash = {};\n                for (var i = 0; i < alphaArray.length; i++) {\n                    alphaHash[alphaArray[i]] = true;\n                }\n                this.alphabet = '';\n                for (var i in alphaHash) {\n                    this.alphabet += i;\n                }\n            }\n            var self = this;\n            /**\n             * Returns a hash keyed by all of the strings that can be made by making a single edit to the word (or words in) `words`\n             * The value of each entry is the number of unique ways that the resulting word can be made.\n             *\n             * @arg HashMap words A hash keyed by words (all with the value `true` to make lookups very quick).\n             * @arg boolean known_only Whether this function should ignore strings that are not in the dictionary.\n             */\n            function edits1(words, known_only) {\n                var rv = {};\n                var i, j, _iilen, _len, _jlen, _edit;\n                var alphabetLength = self.alphabet.length;\n                for (var word_1 in words) {\n                    for (i = 0, _len = word_1.length + 1; i < _len; i++) {\n                        var s = [word_1.substring(0, i), word_1.substring(i)];\n                        // Remove a letter.\n                        if (s[1]) {\n                            _edit = s[0] + s[1].substring(1);\n                            if (!known_only || self.check(_edit)) {\n                                if (!(_edit in rv)) {\n                                    rv[_edit] = 1;\n                                }\n                                else {\n                                    rv[_edit] += 1;\n                                }\n                            }\n                        }\n                        // Transpose letters\n                        // Eliminate transpositions of identical letters\n                        if (s[1].length > 1 && s[1][1] !== s[1][0]) {\n                            _edit = s[0] + s[1][1] + s[1][0] + s[1].substring(2);\n                            if (!known_only || self.check(_edit)) {\n                                if (!(_edit in rv)) {\n                                    rv[_edit] = 1;\n                                }\n                                else {\n                                    rv[_edit] += 1;\n                                }\n                            }\n                        }\n                        if (s[1]) {\n                            // Replace a letter with another letter.\n                            var lettercase = (s[1].substring(0, 1).toUpperCase() === s[1].substring(0, 1)) ? 'uppercase' : 'lowercase';\n                            for (j = 0; j < alphabetLength; j++) {\n                                var replacementLetter = self.alphabet[j];\n                                // Set the case of the replacement letter to the same as the letter being replaced.\n                                if ('uppercase' === lettercase) {\n                                    replacementLetter = replacementLetter.toUpperCase();\n                                }\n                                // Eliminate replacement of a letter by itself\n                                if (replacementLetter != s[1].substring(0, 1)) {\n                                    _edit = s[0] + replacementLetter + s[1].substring(1);\n                                    if (!known_only || self.check(_edit)) {\n                                        if (!(_edit in rv)) {\n                                            rv[_edit] = 1;\n                                        }\n                                        else {\n                                            rv[_edit] += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (s[1]) {\n                            // Add a letter between each letter.\n                            for (j = 0; j < alphabetLength; j++) {\n                                // If the letters on each side are capitalized, capitalize the replacement.\n                                var lettercase = (s[0].substring(-1).toUpperCase() === s[0].substring(-1) && s[1].substring(0, 1).toUpperCase() === s[1].substring(0, 1)) ? 'uppercase' : 'lowercase';\n                                var replacementLetter = self.alphabet[j];\n                                if ('uppercase' === lettercase) {\n                                    replacementLetter = replacementLetter.toUpperCase();\n                                }\n                                _edit = s[0] + replacementLetter + s[1];\n                                if (!known_only || self.check(_edit)) {\n                                    if (!(_edit in rv)) {\n                                        rv[_edit] = 1;\n                                    }\n                                    else {\n                                        rv[_edit] += 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return rv;\n            }\n            function correct(word) {\n                var _a;\n                // Get the edit-distance-1 and edit-distance-2 forms of this word.\n                var ed1 = edits1((_a = {}, _a[word] = true, _a));\n                var ed2 = edits1(ed1, true);\n                // Sort the edits based on how many different ways they were created.\n                var weighted_corrections = ed2;\n                for (var ed1word in ed1) {\n                    if (!self.check(ed1word)) {\n                        continue;\n                    }\n                    if (ed1word in weighted_corrections) {\n                        weighted_corrections[ed1word] += ed1[ed1word];\n                    }\n                    else {\n                        weighted_corrections[ed1word] = ed1[ed1word];\n                    }\n                }\n                var i, _len;\n                var sorted_corrections = [];\n                for (i in weighted_corrections) {\n                    if (weighted_corrections.hasOwnProperty(i)) {\n                        sorted_corrections.push([i, weighted_corrections[i]]);\n                    }\n                }\n                function sorter(a, b) {\n                    var a_val = a[1];\n                    var b_val = b[1];\n                    if (a_val < b_val) {\n                        return -1;\n                    }\n                    else if (a_val > b_val) {\n                        return 1;\n                    }\n                    // @todo If a and b are equally weighted, add our own weight based on something like the key locations on this language's default keyboard.\n                    return b[0].localeCompare(a[0]);\n                }\n                sorted_corrections.sort(sorter).reverse();\n                var rv = [];\n                var capitalization_scheme = \"lowercase\";\n                if (word.toUpperCase() === word) {\n                    capitalization_scheme = \"uppercase\";\n                }\n                else if (word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase() === word) {\n                    capitalization_scheme = \"capitalized\";\n                }\n                var working_limit = limit;\n                for (i = 0; i < Math.min(working_limit, sorted_corrections.length); i++) {\n                    if (\"uppercase\" === capitalization_scheme) {\n                        sorted_corrections[i][0] = sorted_corrections[i][0].toUpperCase();\n                    }\n                    else if (\"capitalized\" === capitalization_scheme) {\n                        sorted_corrections[i][0] = sorted_corrections[i][0].substr(0, 1).toUpperCase() + sorted_corrections[i][0].substr(1);\n                    }\n                    if (!self.hasFlag(sorted_corrections[i][0], \"NOSUGGEST\") && rv.indexOf(sorted_corrections[i][0]) === -1) {\n                        rv.push(sorted_corrections[i][0]);\n                    }\n                    else {\n                        // If one of the corrections is not eligible as a suggestion , make sure we still return the right number of suggestions.\n                        working_limit++;\n                    }\n                }\n                return rv;\n            }\n            this.memoized[word] = {\n                'suggestions': correct(word),\n                'limit': limit\n            };\n            return this.memoized[word]['suggestions'];\n        }\n    };\n})();\n// Support for use as a node.js module.\nif (typeof module !== 'undefined') {\n    module.exports = Typo;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/typo-js/typo.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/typo-js/typo.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}}],"sources":{"node_modules/typo-js/typo.js":"/* globals chrome: false */\n/* globals __dirname: false */\n/* globals require: false */\n/* globals Buffer: false */\n/* globals module: false */\n/**\n * Typo is a JavaScript implementation of a spellchecker using hunspell-style\n * dictionaries.\n */\nvar Typo;\n(function () {\n    \"use strict\";\n    /**\n     * Typo constructor.\n     *\n     * @param {string} [dictionary] The locale code of the dictionary being used. e.g.,\n     *                              \"en_US\". This is only used to auto-load dictionaries.\n     * @param {string} [affData]    The data from the dictionary's .aff file. If omitted\n     *                              and Typo.js is being used in a Chrome extension, the .aff\n     *                              file will be loaded automatically from\n     *                              lib/typo/dictionaries/[dictionary]/[dictionary].aff\n     *                              In other environments, it will be loaded from\n     *                              [settings.dictionaryPath]/dictionaries/[dictionary]/[dictionary].aff\n     * @param {string} [wordsData]  The data from the dictionary's .dic file. If omitted\n     *                              and Typo.js is being used in a Chrome extension, the .dic\n     *                              file will be loaded automatically from\n     *                              lib/typo/dictionaries/[dictionary]/[dictionary].dic\n     *                              In other environments, it will be loaded from\n     *                              [settings.dictionaryPath]/dictionaries/[dictionary]/[dictionary].dic\n     * @param {Object} [settings]   Constructor settings. Available properties are:\n     *                              {string} [dictionaryPath]: path to load dictionary from in non-chrome\n     *                              environment.\n     *                              {Object} [flags]: flag information.\n     *                              {boolean} [asyncLoad]: If true, affData and wordsData will be loaded\n     *                              asynchronously.\n     *                              {Function} [loadedCallback]: Called when both affData and wordsData\n     *                              have been loaded. Only used if asyncLoad is set to true. The parameter\n     *                              is the instantiated Typo object.\n     *\n     * @returns {Typo} A Typo object.\n     */\n    Typo = function (dictionary, affData, wordsData, settings) {\n        settings = settings || {};\n        this.dictionary = null;\n        this.rules = {};\n        this.dictionaryTable = {};\n        this.compoundRules = [];\n        this.compoundRuleCodes = {};\n        this.replacementTable = [];\n        this.flags = settings.flags || {};\n        this.memoized = {};\n        this.loaded = false;\n        var self = this;\n        var path;\n        // Loop-control variables.\n        var i, j, _len, _jlen;\n        if (dictionary) {\n            self.dictionary = dictionary;\n            // If the data is preloaded, just setup the Typo object.\n            if (affData && wordsData) {\n                setup();\n            }\n            // Loading data for Chrome extentions.\n            else if (typeof window !== 'undefined' && (window.chrome || window.browser)) {\n                var runtime = window.chrome && window.chrome.runtime ? window.chrome.runtime : browser.runtime;\n                if (settings.dictionaryPath) {\n                    path = settings.dictionaryPath;\n                }\n                else {\n                    path = \"typo/dictionaries\";\n                }\n                if (!affData)\n                    readDataFile(runtime.getURL(path + \"/\" + dictionary + \"/\" + dictionary + \".aff\"), setAffData);\n                if (!wordsData)\n                    readDataFile(runtime.getURL(path + \"/\" + dictionary + \"/\" + dictionary + \".dic\"), setWordsData);\n            }\n            // Loading data for Node.js or other environments.\n            else {\n                if (settings.dictionaryPath) {\n                    path = settings.dictionaryPath;\n                }\n                else if (typeof __dirname !== 'undefined') {\n                    path = __dirname + '/dictionaries';\n                }\n                else {\n                    path = './dictionaries';\n                }\n                if (!affData)\n                    readDataFile(path + \"/\" + dictionary + \"/\" + dictionary + \".aff\", setAffData);\n                if (!wordsData)\n                    readDataFile(path + \"/\" + dictionary + \"/\" + dictionary + \".dic\", setWordsData);\n            }\n        }\n        function readDataFile(url, setFunc) {\n            var response = self._readFile(url, null, settings === null || settings === void 0 ? void 0 : settings.asyncLoad);\n            if (settings === null || settings === void 0 ? void 0 : settings.asyncLoad) {\n                response.then(function (data) {\n                    setFunc(data);\n                });\n            }\n            else {\n                setFunc(response);\n            }\n        }\n        function setAffData(data) {\n            affData = data;\n            if (wordsData) {\n                setup();\n            }\n        }\n        function setWordsData(data) {\n            wordsData = data;\n            if (affData) {\n                setup();\n            }\n        }\n        function setup() {\n            self.rules = self._parseAFF(affData);\n            // Save the rule codes that are used in compound rules.\n            self.compoundRuleCodes = {};\n            for (i = 0, _len = self.compoundRules.length; i < _len; i++) {\n                var rule = self.compoundRules[i];\n                for (j = 0, _jlen = rule.length; j < _jlen; j++) {\n                    self.compoundRuleCodes[rule[j]] = [];\n                }\n            }\n            // If we add this ONLYINCOMPOUND flag to self.compoundRuleCodes, then _parseDIC\n            // will do the work of saving the list of words that are compound-only.\n            if (\"ONLYINCOMPOUND\" in self.flags) {\n                self.compoundRuleCodes[self.flags.ONLYINCOMPOUND] = [];\n            }\n            self.dictionaryTable = self._parseDIC(wordsData);\n            // Get rid of any codes from the compound rule codes that are never used\n            // (or that were special regex characters).  Not especially necessary...\n            for (i in self.compoundRuleCodes) {\n                if (self.compoundRuleCodes[i].length === 0) {\n                    delete self.compoundRuleCodes[i];\n                }\n            }\n            // Build the full regular expressions for each compound rule.\n            // I have a feeling (but no confirmation yet) that this method of\n            // testing for compound words is probably slow.\n            for (i = 0, _len = self.compoundRules.length; i < _len; i++) {\n                var ruleText = self.compoundRules[i];\n                var expressionText = \"\";\n                for (j = 0, _jlen = ruleText.length; j < _jlen; j++) {\n                    var character = ruleText[j];\n                    if (character in self.compoundRuleCodes) {\n                        expressionText += \"(\" + self.compoundRuleCodes[character].join(\"|\") + \")\";\n                    }\n                    else {\n                        expressionText += character;\n                    }\n                }\n                self.compoundRules[i] = new RegExp('^' + expressionText + '$', \"i\");\n            }\n            self.loaded = true;\n            if ((settings === null || settings === void 0 ? void 0 : settings.asyncLoad) && (settings === null || settings === void 0 ? void 0 : settings.loadedCallback)) {\n                settings.loadedCallback(self);\n            }\n        }\n        return this;\n    };\n    Typo.prototype = {\n        /**\n         * Loads a Typo instance from a hash of all of the Typo properties.\n         *\n         * @param {object} obj A hash of Typo properties, probably gotten from a JSON.parse(JSON.stringify(typo_instance)).\n         */\n        load: function (obj) {\n            for (var i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    this[i] = obj[i];\n                }\n            }\n            return this;\n        },\n        /**\n         * Read the contents of a file.\n         *\n         * @param {string} path The path (relative) to the file.\n         * @param {string} [charset=\"ISO8859-1\"] The expected charset of the file\n         * @param {boolean} async If true, the file will be read asynchronously. For node.js this does nothing, all\n         *        files are read synchronously.\n         * @returns {string} The file data if async is false, otherwise a promise object. If running node.js, the data is\n         *          always returned.\n         */\n        _readFile: function (path, charset, async) {\n            var _a;\n            charset = charset || \"utf8\";\n            if (typeof XMLHttpRequest !== 'undefined') {\n                var req_1 = new XMLHttpRequest();\n                req_1.open(\"GET\", path, !!async);\n                (_a = req_1.overrideMimeType) === null || _a === void 0 ? void 0 : _a.call(req_1, \"text/plain; charset=\" + charset);\n                if (!!async) {\n                    var promise = new Promise(function (resolve, reject) {\n                        req_1.onload = function () {\n                            if (req_1.status === 200) {\n                                resolve(req_1.responseText);\n                            }\n                            else {\n                                reject(req_1.statusText);\n                            }\n                        };\n                        req_1.onerror = function () {\n                            reject(req_1.statusText);\n                        };\n                    });\n                    req_1.send(null);\n                    return promise;\n                }\n                else {\n                    req_1.send(null);\n                    return req_1.responseText;\n                }\n            }\n            else if (typeof require !== 'undefined') {\n                // Node.js\n                var fs = require(\"fs\");\n                try {\n                    if (fs.existsSync(path)) {\n                        return fs.readFileSync(path, charset);\n                    }\n                    else {\n                        console.log(\"Path \" + path + \" does not exist.\");\n                    }\n                }\n                catch (e) {\n                    console.log(e);\n                }\n                return '';\n            }\n            return '';\n        },\n        /**\n         * Parse the rules out from a .aff file.\n         *\n         * @param {string} data The contents of the affix file.\n         * @returns object The rules from the file.\n         */\n        _parseAFF: function (data) {\n            var rules = {};\n            var line, subline, numEntries, lineParts;\n            var i, j, _len, _jlen;\n            var lines = data.split(/\\r?\\n/);\n            for (i = 0, _len = lines.length; i < _len; i++) {\n                // Remove comment lines\n                line = this._removeAffixComments(lines[i]);\n                line = line.trim();\n                if (!line) {\n                    continue;\n                }\n                var definitionParts = line.split(/\\s+/);\n                var ruleType = definitionParts[0];\n                if (ruleType === \"PFX\" || ruleType === \"SFX\") {\n                    var ruleCode = definitionParts[1];\n                    var combineable = definitionParts[2];\n                    numEntries = parseInt(definitionParts[3], 10);\n                    var entries = [];\n                    for (j = i + 1, _jlen = i + 1 + numEntries; j < _jlen; j++) {\n                        subline = lines[j];\n                        lineParts = subline.split(/\\s+/);\n                        var charactersToRemove = lineParts[2];\n                        var additionParts = lineParts[3].split(\"/\");\n                        var charactersToAdd = additionParts[0];\n                        if (charactersToAdd === \"0\")\n                            charactersToAdd = \"\";\n                        var continuationClasses = this.parseRuleCodes(additionParts[1]);\n                        var regexToMatch = lineParts[4];\n                        var entry = {\n                            add: charactersToAdd\n                        };\n                        if (continuationClasses.length > 0)\n                            entry.continuationClasses = continuationClasses;\n                        if (regexToMatch !== \".\") {\n                            if (ruleType === \"SFX\") {\n                                entry.match = new RegExp(regexToMatch + \"$\");\n                            }\n                            else {\n                                entry.match = new RegExp(\"^\" + regexToMatch);\n                            }\n                        }\n                        if (charactersToRemove != \"0\") {\n                            if (ruleType === \"SFX\") {\n                                entry.remove = new RegExp(charactersToRemove + \"$\");\n                            }\n                            else {\n                                entry.remove = charactersToRemove;\n                            }\n                        }\n                        entries.push(entry);\n                    }\n                    rules[ruleCode] = { \"type\": ruleType, \"combineable\": (combineable === \"Y\"), \"entries\": entries };\n                    i += numEntries;\n                }\n                else if (ruleType === \"COMPOUNDRULE\") {\n                    numEntries = parseInt(definitionParts[1], 10);\n                    for (j = i + 1, _jlen = i + 1 + numEntries; j < _jlen; j++) {\n                        line = lines[j];\n                        lineParts = line.split(/\\s+/);\n                        this.compoundRules.push(lineParts[1]);\n                    }\n                    i += numEntries;\n                }\n                else if (ruleType === \"REP\") {\n                    lineParts = line.split(/\\s+/);\n                    if (lineParts.length === 3) {\n                        this.replacementTable.push([lineParts[1], lineParts[2]]);\n                    }\n                }\n                else {\n                    // ONLYINCOMPOUND\n                    // COMPOUNDMIN\n                    // FLAG\n                    // KEEPCASE\n                    // NEEDAFFIX\n                    this.flags[ruleType] = definitionParts[1];\n                }\n            }\n            return rules;\n        },\n        /**\n         * Removes comments.\n         *\n         * @param {string} data A line from an affix file.\n         * @return {string} The cleaned-up line.\n         */\n        _removeAffixComments: function (line) {\n            // This used to remove any string starting with '#' up to the end of the line,\n            // but some COMPOUNDRULE definitions include '#' as part of the rule.\n            // So, only remove lines that begin with a comment, optionally preceded by whitespace.\n            if (line.match(/^\\s*#/)) {\n                return '';\n            }\n            return line;\n        },\n        /**\n         * Parses the words out from the .dic file.\n         *\n         * @param {string} data The data from the dictionary file.\n         * @returns HashMap The lookup table containing all of the words and\n         *                 word forms from the dictionary.\n         */\n        _parseDIC: function (data) {\n            data = this._removeDicComments(data);\n            var lines = data.split(/\\r?\\n/);\n            var dictionaryTable = {};\n            function addWord(word, rules) {\n                // Some dictionaries will list the same word multiple times with different rule sets.\n                if (!dictionaryTable.hasOwnProperty(word)) {\n                    dictionaryTable[word] = null;\n                }\n                if (rules.length > 0) {\n                    if (dictionaryTable[word] === null) {\n                        dictionaryTable[word] = [];\n                    }\n                    dictionaryTable[word].push(rules);\n                }\n            }\n            // The first line is the number of words in the dictionary.\n            for (var i = 1, _len = lines.length; i < _len; i++) {\n                var line = lines[i];\n                if (!line) {\n                    // Ignore empty lines.\n                    continue;\n                }\n                var parts = line.split(\"/\", 2);\n                var word = parts[0];\n                // Now for each affix rule, generate that form of the word.\n                if (parts.length > 1) {\n                    var ruleCodesArray = this.parseRuleCodes(parts[1]);\n                    // Save the ruleCodes for compound word situations.\n                    if (!(\"NEEDAFFIX\" in this.flags) || ruleCodesArray.indexOf(this.flags.NEEDAFFIX) === -1) {\n                        addWord(word, ruleCodesArray);\n                    }\n                    for (var j = 0, _jlen = ruleCodesArray.length; j < _jlen; j++) {\n                        var code = ruleCodesArray[j];\n                        var rule = this.rules[code];\n                        if (rule) {\n                            var newWords = this._applyRule(word, rule);\n                            for (var ii = 0, _iilen = newWords.length; ii < _iilen; ii++) {\n                                var newWord = newWords[ii];\n                                addWord(newWord, []);\n                                if (rule.combineable) {\n                                    for (var k = j + 1; k < _jlen; k++) {\n                                        var combineCode = ruleCodesArray[k];\n                                        var combineRule = this.rules[combineCode];\n                                        if (combineRule) {\n                                            if (combineRule.combineable && (rule.type != combineRule.type)) {\n                                                var otherNewWords = this._applyRule(newWord, combineRule);\n                                                for (var iii = 0, _iiilen = otherNewWords.length; iii < _iiilen; iii++) {\n                                                    var otherNewWord = otherNewWords[iii];\n                                                    addWord(otherNewWord, []);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (code in this.compoundRuleCodes) {\n                            this.compoundRuleCodes[code].push(word);\n                        }\n                    }\n                }\n                else {\n                    addWord(word.trim(), []);\n                }\n            }\n            return dictionaryTable;\n        },\n        /**\n         * Removes comment lines and then cleans up blank lines and trailing whitespace.\n         *\n         * @param {string} data The data from a .dic file.\n         * @return {string} The cleaned-up data.\n         */\n        _removeDicComments: function (data) {\n            // I can't find any official documentation on it, but at least the de_DE\n            // dictionary uses tab-indented lines as comments.\n            // Remove comments\n            data = data.replace(/^\\t.*$/mg, \"\");\n            return data;\n        },\n        parseRuleCodes: function (textCodes) {\n            if (!textCodes) {\n                return [];\n            }\n            else if (!(\"FLAG\" in this.flags)) {\n                // The flag symbols are single characters\n                return textCodes.split(\"\");\n            }\n            else if (this.flags.FLAG === \"long\") {\n                // The flag symbols are two characters long.\n                var flags = [];\n                for (var i = 0, _len = textCodes.length; i < _len; i += 2) {\n                    flags.push(textCodes.substr(i, 2));\n                }\n                return flags;\n            }\n            else if (this.flags.FLAG === \"num\") {\n                // The flag symbols are a CSV list of numbers.\n                return textCodes.split(\",\");\n            }\n            else if (this.flags.FLAG === \"UTF-8\") {\n                // The flags are single UTF-8 characters.\n                // @see https://github.com/cfinke/Typo.js/issues/57\n                return Array.from(textCodes);\n            }\n            else {\n                // It's possible that this fallback case will not work for all FLAG values,\n                // but I think it's more likely to work than not returning anything at all.\n                return textCodes.split(\"\");\n            }\n        },\n        /**\n         * Applies an affix rule to a word.\n         *\n         * @param {string} word The base word.\n         * @param {Object} rule The affix rule.\n         * @returns {string[]} The new words generated by the rule.\n         */\n        _applyRule: function (word, rule) {\n            var entries = rule.entries;\n            var newWords = [];\n            for (var i = 0, _len = entries.length; i < _len; i++) {\n                var entry = entries[i];\n                if (!entry.match || word.match(entry.match)) {\n                    var newWord = word;\n                    if (entry.remove) {\n                        newWord = newWord.replace(entry.remove, \"\");\n                    }\n                    if (rule.type === \"SFX\") {\n                        newWord = newWord + entry.add;\n                    }\n                    else {\n                        newWord = entry.add + newWord;\n                    }\n                    newWords.push(newWord);\n                    if (\"continuationClasses\" in entry) {\n                        for (var j = 0, _jlen = entry.continuationClasses.length; j < _jlen; j++) {\n                            var continuationRule = this.rules[entry.continuationClasses[j]];\n                            if (continuationRule) {\n                                newWords = newWords.concat(this._applyRule(newWord, continuationRule));\n                            }\n                            /*\n                            else {\n                                // This shouldn't happen, but it does, at least in the de_DE dictionary.\n                                // I think the author mistakenly supplied lower-case rule codes instead\n                                // of upper-case.\n                            }\n                            */\n                        }\n                    }\n                }\n            }\n            return newWords;\n        },\n        /**\n         * Checks whether a word or a capitalization variant exists in the current dictionary.\n         * The word is trimmed and several variations of capitalizations are checked.\n         * If you want to check a word without any changes made to it, call checkExact()\n         *\n         * @see http://blog.stevenlevithan.com/archives/faster-trim-javascript re:trimming function\n         *\n         * @param {string} aWord The word to check.\n         * @returns {boolean}\n         */\n        check: function (aWord) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            if (!aWord) {\n                return false;\n            }\n            // Remove leading and trailing whitespace\n            var trimmedWord = aWord.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n            if (this.checkExact(trimmedWord)) {\n                return true;\n            }\n            // The exact word is not in the dictionary.\n            if (trimmedWord.toUpperCase() === trimmedWord) {\n                // The word was supplied in all uppercase.\n                // Check for a capitalized form of the word.\n                var capitalizedWord = trimmedWord[0] + trimmedWord.substring(1).toLowerCase();\n                if (this.hasFlag(capitalizedWord, \"KEEPCASE\")) {\n                    // Capitalization variants are not allowed for this word.\n                    return false;\n                }\n                if (this.checkExact(capitalizedWord)) {\n                    // The all-caps word is a capitalized word spelled correctly.\n                    return true;\n                }\n                if (this.checkExact(trimmedWord.toLowerCase())) {\n                    // The all-caps is a lowercase word spelled correctly.\n                    return true;\n                }\n            }\n            var uncapitalizedWord = trimmedWord[0].toLowerCase() + trimmedWord.substring(1);\n            if (uncapitalizedWord !== trimmedWord) {\n                if (this.hasFlag(uncapitalizedWord, \"KEEPCASE\")) {\n                    // Capitalization variants are not allowed for this word.\n                    return false;\n                }\n                // Check for an uncapitalized form\n                if (this.checkExact(uncapitalizedWord)) {\n                    // The word is spelled correctly but with the first letter capitalized.\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Checks whether a word exists in the current dictionary.\n         *\n         * @param {string} word The word to check.\n         * @returns {boolean}\n         */\n        checkExact: function (word) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            var ruleCodes = this.dictionaryTable[word];\n            var i, _len;\n            if (typeof ruleCodes === 'undefined') {\n                // Check if this might be a compound word.\n                if (\"COMPOUNDMIN\" in this.flags && word.length >= this.flags.COMPOUNDMIN) {\n                    for (i = 0, _len = this.compoundRules.length; i < _len; i++) {\n                        if (word.match(this.compoundRules[i])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            else if (ruleCodes === null) {\n                // a null (but not undefined) value for an entry in the dictionary table\n                // means that the word is in the dictionary but has no flags.\n                return true;\n            }\n            else if (typeof ruleCodes === 'object') { // this.dictionary['hasOwnProperty'] will be a function.\n                for (i = 0, _len = ruleCodes.length; i < _len; i++) {\n                    if (!this.hasFlag(word, \"ONLYINCOMPOUND\", ruleCodes[i])) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        },\n        /**\n         * Looks up whether a given word is flagged with a given flag.\n         *\n         * @param {string} word The word in question.\n         * @param {string} flag The flag in question.\n         * @return {boolean}\n         */\n        hasFlag: function (word, flag, wordFlags) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            if (flag in this.flags) {\n                if (typeof wordFlags === 'undefined') {\n                    wordFlags = Array.prototype.concat.apply([], this.dictionaryTable[word]);\n                }\n                if (wordFlags && wordFlags.indexOf(this.flags[flag]) !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Returns a list of suggestions for a misspelled word.\n         *\n         * @see http://www.norvig.com/spell-correct.html for the basis of this suggestor.\n         * This suggestor is primitive, but it works.\n         *\n         * @param {string} word The misspelling.\n         * @param {number} [limit=5] The maximum number of suggestions to return.\n         * @returns {string[]} The array of suggestions.\n         */\n        alphabet: \"\",\n        suggest: function (word, limit) {\n            if (!this.loaded) {\n                throw \"Dictionary not loaded.\";\n            }\n            limit = limit || 5;\n            if (this.memoized.hasOwnProperty(word)) {\n                var memoizedLimit = this.memoized[word]['limit'];\n                // Only return the cached list if it's big enough or if there weren't enough suggestions\n                // to fill a smaller limit.\n                if (limit <= memoizedLimit || this.memoized[word]['suggestions'].length < memoizedLimit) {\n                    return this.memoized[word]['suggestions'].slice(0, limit);\n                }\n            }\n            if (this.check(word))\n                return [];\n            // Check the replacement table.\n            for (var i = 0, _len = this.replacementTable.length; i < _len; i++) {\n                var replacementEntry = this.replacementTable[i];\n                if (word.indexOf(replacementEntry[0]) !== -1) {\n                    var correctedWord = word.replace(replacementEntry[0], replacementEntry[1]);\n                    if (this.check(correctedWord)) {\n                        return [correctedWord];\n                    }\n                }\n            }\n            if (!this.alphabet) {\n                // Use the English alphabet as the default. Problematic, but backwards-compatible.\n                this.alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n                // Any characters defined in the affix file as substitutions can go in the alphabet too.\n                // Note that dictionaries do not include the entire alphabet in the TRY flag when it's there.\n                // For example, Q is not in the default English TRY list; that's why having the default\n                // alphabet above is useful.\n                if ('TRY' in this.flags) {\n                    this.alphabet += this.flags['TRY'];\n                }\n                // Plus any additional characters specifically defined as being allowed in words.\n                if ('WORDCHARS' in this.flags) {\n                    this.alphabet += this.flags['WORDCHARS'];\n                }\n                // Remove any duplicates.\n                var alphaArray = this.alphabet.split(\"\");\n                alphaArray.sort();\n                var alphaHash = {};\n                for (var i = 0; i < alphaArray.length; i++) {\n                    alphaHash[alphaArray[i]] = true;\n                }\n                this.alphabet = '';\n                for (var i in alphaHash) {\n                    this.alphabet += i;\n                }\n            }\n            var self = this;\n            /**\n             * Returns a hash keyed by all of the strings that can be made by making a single edit to the word (or words in) `words`\n             * The value of each entry is the number of unique ways that the resulting word can be made.\n             *\n             * @arg HashMap words A hash keyed by words (all with the value `true` to make lookups very quick).\n             * @arg boolean known_only Whether this function should ignore strings that are not in the dictionary.\n             */\n            function edits1(words, known_only) {\n                var rv = {};\n                var i, j, _iilen, _len, _jlen, _edit;\n                var alphabetLength = self.alphabet.length;\n                for (var word_1 in words) {\n                    for (i = 0, _len = word_1.length + 1; i < _len; i++) {\n                        var s = [word_1.substring(0, i), word_1.substring(i)];\n                        // Remove a letter.\n                        if (s[1]) {\n                            _edit = s[0] + s[1].substring(1);\n                            if (!known_only || self.check(_edit)) {\n                                if (!(_edit in rv)) {\n                                    rv[_edit] = 1;\n                                }\n                                else {\n                                    rv[_edit] += 1;\n                                }\n                            }\n                        }\n                        // Transpose letters\n                        // Eliminate transpositions of identical letters\n                        if (s[1].length > 1 && s[1][1] !== s[1][0]) {\n                            _edit = s[0] + s[1][1] + s[1][0] + s[1].substring(2);\n                            if (!known_only || self.check(_edit)) {\n                                if (!(_edit in rv)) {\n                                    rv[_edit] = 1;\n                                }\n                                else {\n                                    rv[_edit] += 1;\n                                }\n                            }\n                        }\n                        if (s[1]) {\n                            // Replace a letter with another letter.\n                            var lettercase = (s[1].substring(0, 1).toUpperCase() === s[1].substring(0, 1)) ? 'uppercase' : 'lowercase';\n                            for (j = 0; j < alphabetLength; j++) {\n                                var replacementLetter = self.alphabet[j];\n                                // Set the case of the replacement letter to the same as the letter being replaced.\n                                if ('uppercase' === lettercase) {\n                                    replacementLetter = replacementLetter.toUpperCase();\n                                }\n                                // Eliminate replacement of a letter by itself\n                                if (replacementLetter != s[1].substring(0, 1)) {\n                                    _edit = s[0] + replacementLetter + s[1].substring(1);\n                                    if (!known_only || self.check(_edit)) {\n                                        if (!(_edit in rv)) {\n                                            rv[_edit] = 1;\n                                        }\n                                        else {\n                                            rv[_edit] += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (s[1]) {\n                            // Add a letter between each letter.\n                            for (j = 0; j < alphabetLength; j++) {\n                                // If the letters on each side are capitalized, capitalize the replacement.\n                                var lettercase = (s[0].substring(-1).toUpperCase() === s[0].substring(-1) && s[1].substring(0, 1).toUpperCase() === s[1].substring(0, 1)) ? 'uppercase' : 'lowercase';\n                                var replacementLetter = self.alphabet[j];\n                                if ('uppercase' === lettercase) {\n                                    replacementLetter = replacementLetter.toUpperCase();\n                                }\n                                _edit = s[0] + replacementLetter + s[1];\n                                if (!known_only || self.check(_edit)) {\n                                    if (!(_edit in rv)) {\n                                        rv[_edit] = 1;\n                                    }\n                                    else {\n                                        rv[_edit] += 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return rv;\n            }\n            function correct(word) {\n                var _a;\n                // Get the edit-distance-1 and edit-distance-2 forms of this word.\n                var ed1 = edits1((_a = {}, _a[word] = true, _a));\n                var ed2 = edits1(ed1, true);\n                // Sort the edits based on how many different ways they were created.\n                var weighted_corrections = ed2;\n                for (var ed1word in ed1) {\n                    if (!self.check(ed1word)) {\n                        continue;\n                    }\n                    if (ed1word in weighted_corrections) {\n                        weighted_corrections[ed1word] += ed1[ed1word];\n                    }\n                    else {\n                        weighted_corrections[ed1word] = ed1[ed1word];\n                    }\n                }\n                var i, _len;\n                var sorted_corrections = [];\n                for (i in weighted_corrections) {\n                    if (weighted_corrections.hasOwnProperty(i)) {\n                        sorted_corrections.push([i, weighted_corrections[i]]);\n                    }\n                }\n                function sorter(a, b) {\n                    var a_val = a[1];\n                    var b_val = b[1];\n                    if (a_val < b_val) {\n                        return -1;\n                    }\n                    else if (a_val > b_val) {\n                        return 1;\n                    }\n                    // @todo If a and b are equally weighted, add our own weight based on something like the key locations on this language's default keyboard.\n                    return b[0].localeCompare(a[0]);\n                }\n                sorted_corrections.sort(sorter).reverse();\n                var rv = [];\n                var capitalization_scheme = \"lowercase\";\n                if (word.toUpperCase() === word) {\n                    capitalization_scheme = \"uppercase\";\n                }\n                else if (word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase() === word) {\n                    capitalization_scheme = \"capitalized\";\n                }\n                var working_limit = limit;\n                for (i = 0; i < Math.min(working_limit, sorted_corrections.length); i++) {\n                    if (\"uppercase\" === capitalization_scheme) {\n                        sorted_corrections[i][0] = sorted_corrections[i][0].toUpperCase();\n                    }\n                    else if (\"capitalized\" === capitalization_scheme) {\n                        sorted_corrections[i][0] = sorted_corrections[i][0].substr(0, 1).toUpperCase() + sorted_corrections[i][0].substr(1);\n                    }\n                    if (!self.hasFlag(sorted_corrections[i][0], \"NOSUGGEST\") && rv.indexOf(sorted_corrections[i][0]) === -1) {\n                        rv.push(sorted_corrections[i][0]);\n                    }\n                    else {\n                        // If one of the corrections is not eligible as a suggestion , make sure we still return the right number of suggestions.\n                        working_limit++;\n                    }\n                }\n                return rv;\n            }\n            this.memoized[word] = {\n                'suggestions': correct(word),\n                'limit': limit\n            };\n            return this.memoized[word]['suggestions'];\n        }\n    };\n})();\n// Support for use as a node.js module.\nif (typeof module !== 'undefined') {\n    module.exports = Typo;\n}\n"},"lineCount":836}},"error":null,"hash":"809f8390b28e12ab617e557f4d92b464","cacheData":{"env":{}}}